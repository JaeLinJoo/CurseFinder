# -*- coding: utf-8 -*-
"""Untitled11 (4).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_E_MmQYyTYWMw5LmE_1jK_UZp-GNRbMm
"""
#coding=UTF -8
import sys
import json
from nltk import ngrams
from sklearn.metrics import classification_report
import random
import operator
import numpy as np
import math
import csv

kor_begin = 44032
kor_end = 55203
chosung_base = 588
jungsung_base = 28
jaum_begin = 12593
jaum_end = 12622
moum_begin = 12623
moum_end = 12643

chosung_list = [ 'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 
                 'ㅅ', 'ㅆ', 'ㅇ' , 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ']

jungsung_list = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 
                 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 
                 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 
                 'ㅡ', 'ㅢ', 'ㅣ']

jongsung_list = [
        ' ',  'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ',
        'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 
        'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 
        'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ']

jaum_list = [ ' ',  'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄸ', 'ㄹ', 
              'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅃ',
              'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ']

moum_list = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 
              'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ']

chodict = {}
for i in range(len(chosung_list)):
    chodict[chosung_list[i]]=i

jungdict = {}
for i in range(len(jungsung_list)):
    jungdict[jungsung_list[i]]=i

jongdict = {}
for i in range(len(jongsung_list)):
    jongdict[jongsung_list[i]]=i

chodist =  [[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],[1,1,0,1,1,1,0.5,1,1,1,1,0.5,1,1,1,1,1,1,1],[1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1],[1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1],[1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,0.5,1,1,1,0,1,1,1,1,0.5,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1],[1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1],[1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0.3],[1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1],[1,1,0.5,1,1,1,0.5,1,1,1,1,0,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1],[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],[1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1],[1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1],[1,1,1,1,1,1,1,1,1,0.3,1,1,1,1,1,1,1,1,0]]
jungdist = [[0,1,0.1,1,0.7,1,1,1,1,0.2,1,1,1,1,1,1,1,1,1,1,1],[1,0,1,0,1,0,1,0.1,1,1,0.2,0.3,1,1,1,0.3,1,1,1,1,1],[0.1,1,0,0.5,1,1,0.7,1,1,1,1,1,0.8,1,1,1,1,1,1,1,1],[1,0,0.5,0,1,0.2,1,0,1,1,0.8,0.8,1,1,1,0.8,1,1,1,1,1],[0.7,1,1,1,0,1,0.2,1,1,1,1,1,1,1,0.3,1,1,1,1,1,1],[1,0,1,0.2,1,0,1,0,1,1,0.7,0.4,1,1,1,0.3,1,1,1,1,1],[1,1,0.7,1,0.2,1,0,0.8,1,1,1,1,0.8,1,0.7,1,1,1,1,1,1],[1,0.1,1,0,1,0,0.8,0,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,0,0.5,1,1,0.5,0.7,1,1,1,1,1,1,1],[0.2,1,1,1,1,1,1,1,0.5,0,1,1,1,1,1,1,1,1,1,1,1],[1,0.2,1,0.8,1,0.7,1,1,1,1,0,0.2,1,1,1,0.1,1,1,1,1,1],[1,0.3,1,0.8,1,0.4,1,1,1,1,0.2,0,1,1,1,0.2,1,1,1,1,1],[1,1,0.8,1,1,1,0.8,1,0.5,1,1,1,0,1,1,1,1,0.5,1,1,1],[1,1,1,1,1,1,1,1,0.7,1,1,1,1,0,1,1,0.5,0.2,0.7,0.8,1],[1,1,1,1,0.3,1,0.7,1,1,1,1,1,1,1,0,1,1,1,1,1,1],[1,0.3,1,0.8,1,0.3,1,1,1,1,0.1,0.2,1,1,1,0,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,0.5,1,1,0,0.6,0.6,0.2,0.2],[1,1,1,1,1,1,1,1,1,1,1,1,0.5,0.2,1,1,0.6,0,0.5,0.5,0.1],[1,1,1,1,1,1,1,1,1,1,1,1,1,0.7,1,1,0.6,0.5,0,0.1,0.3],[1,1,1,1,1,1,1,1,1,1,1,1,1,0.8,1,1,0.2,0.5,0.1,0,0.1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.2,0.1,0.3,0.1,0]]
jongdist = [[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,0,0.2,0.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.2,1,1,1],[1,0.2,0,0.3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.3,1,1,1],[1,0.2,0.3,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.4,1,1,1],[1,1,1,1,0,0.2,0.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,0.2,0,0.4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,0.2,0.4,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0.3,0.3,1,0.3,0.3,1,0.3,1,1],[1,1,1,1,1,1,1,1,0,0.3,0.5,0.5,0.7,0.5,0.5,0.1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,0.3,0,0.7,0.7,0.7,0.7,0.7,0.7,1,1,1,1,1,0.3,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,0.5,0.7,0,0.7,0.7,0.7,0.7,0.7,0.3,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,0.5,0.7,0.7,0,0.8,0.8,0.5,0.8,1,0.3,0.5,1,1,1,1,1,1,1,0.7,1],[1,1,1,1,1,1,1,1,0.7,0.7,0.7,0.8,0,0.7,0.7,0.7,1,1,1,0.6,0.6,1,0.7,0.7,1,0.7,1,1],[1,1,1,1,1,1,1,1,0.5,0.7,0.7,0.8,0.7,0,0.7,0.8,1,1,1,0.7,0.7,1,0.7,0.7,1,0.7,1,1],[1,1,1,1,1,1,1,1,0.5,0.7,0.7,0.5,0.7,0.7,0,0.8,1,0.7,0.7,1,1,1,1,1,1,1,0.7,1],[1,1,1,1,1,1,1,1,0.1,0.7,0.7,0.8,0.7,0.8,0.8,0,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,0.3,1,1,1,1,1,0,0.5,0.5,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,0.3,1,1,0.7,1,0.5,0,0.1,1,1,1,1,1,1,1,0.1,1],[1,1,1,1,1,1,1,1,1,1,1,0.5,1,1,0.7,1,0.5,0.1,0,1,1,1,1,1,1,1,0.3,1],[1,1,1,1,1,1,1,0.3,1,1,1,1,0.6,0.7,1,1,1,1,1,0,0.1,1,0.3,0.3,1,0.3,1,1],[1,1,1,1,1,1,1,0.3,1,1,1,1,0.6,0.7,1,1,1,1,1,0.1,0,1,0.3,0.3,1,0.3,1,1],[1,1,1,1,1,1,1,1,1,0.3,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1],[1,1,1,1,1,1,1,0.3,1,1,1,1,0.7,0.7,1,1,1,1,1,0.3,0.3,1,0,0.3,1,0.3,1,1],[1,1,1,1,1,1,1,0.3,1,1,1,1,0.7,0.7,1,1,1,1,1,0.3,0.3,1,0.3,0,1,0.3,1,1],[1,0.2,0.3,0.4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],[1,1,1,1,1,1,1,0.3,1,1,1,1,0.7,0.7,1,1,1,1,1,0.3,0.3,1,0.3,0.3,1,0,1,1],[1,1,1,1,1,1,1,1,1,1,1,0.7,1,1,0.7,1,1,0.1,0.3,1,1,1,1,1,1,1,0,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]]




def compose(chosung, jungsung, jongsung):
    char = chr(
        kor_begin +
        chosung_base * chosung_list.index(chosung) +
        jungsung_base * jungsung_list.index(jungsung) +
        jongsung_list.index(jongsung)
    )
    return char

def decompose(c):
    i = ord(c)
    
    if (jaum_begin <= i <= jaum_end):
        return (c, ' ', ' ')
    if (moum_begin <= i <= moum_end):
        return (' ', c, ' ')

    # decomposition rule
    i -= kor_begin
    cho  = i // chosung_base
    jung = ( i - cho * chosung_base ) // jungsung_base 
    jong = ( i - cho * chosung_base - jung * jungsung_base )
    return (chosung_list[cho], jungsung_list[jung], jongsung_list[jong])

def character_is_korean(c):
    i = ord(c)
    return ((kor_begin <= i <= kor_end) or
            (jaum_begin <= i <= jaum_end) or
            (moum_begin <= i <= moum_end))



def levenshtein(s1, s2, debug=False):
    prevSame = 0
    if len(s1) < len(s2):
        return 300

    if len(s2) == 0:
        return len(s1)
    previous_row = range(len(s2) + 1)
    for i, c1 in enumerate(s1):
        current_row = [i + 1]
        for j, c2 in enumerate(s2):
            a=1
            if(i==j):
                if(j==0):
                    if(c1==' 'or c2==' '):
                        if(c1 == c2):
                            a=0
                        else:
                            a=1
                    else:
                        a = chodist[chodict[c1]][chodict[c2]]
                elif(j==1):
                    if(c1==' 'or c2==' '):
                        if(c1 == c2):
                            a=0
                        else:
                            a=1
                    else:
                        a = jungdist[jungdict[c1]][jungdict[c2]]
                elif(j==2):
                    a = jongdist[jongdict[c1]][jongdict[c2]]
                
            
            insertions = previous_row[j + 1] + 1
            deletions = current_row[j] + 1
            substitutions = previous_row[j] + float(a)
            if(prevSame==0):
                if(c1=='ㅆ' or c1=='ㅅ'):
                    if(c2=='ㅆ' or c2=='ㅅ'):
                            prevSame = 1
            
            elif(prevSame==1):
                if(c1 == ''):
                    if(c2 in moum_list):
                        insertions = previous_row[j + 1]
                        prevSame=0
            
            current_row.append(min(insertions, deletions, substitutions))
        
        #if debug:
            #print(current_row[1:])

        previous_row = current_row

    return previous_row[-1]



def jamo_levenshtein(s1, s2, debug=False):
    if len(s1) < len(s2):
        return 100

    if len(s2) == 0:
        return len(s1)

    def substitution_cost(c1, c2):
        if c1 == c2:
            return 0
        return levenshtein(decompose(c1), decompose(c2))/3

    previous_row = range(len(s2) + 1)
    for i, c1 in enumerate(s1):
        current_row = [i + 1]
        for j, c2 in enumerate(s2):
            insertions = previous_row[j + 1] +1
            deletions = current_row[j] + 1
            # Changed
            substitutions = previous_row[j] + substitution_cost(c1, c2)
            current_row.append(min(insertions, deletions, substitutions))

        #if debug:
            #print(['%.3f'%v for v in current_row[1:]])

        previous_row = current_row

    return previous_row[-1]

def sortFirst(val): 
    return val[0]


def sortSecond(val): 
    return val[1]

            
#!/usr/bin/env python
# coding: utf-8

# In[70]:

               

def getNeighbors(trainingSet, testInstance, k):
    distances = []
    distt = []
    distss=[]
    s2 = testInstance.split(" ")
    for i in range(len(s2)):
        v=0
        B=len(s2[i])
        for ii in range(B):
            ii = ii-v
            if(B<=ii or ii<0):
                break
            if (ord(" ")<=ord(s2[i][ii])<=ord("~")):
                s2[i] = s2[i].replace(s2[i][ii],'')
                v += 1
                B = len(s2[i])
                
    for x in range(len(trainingSet)):
        for y in range(len(s2)):
            a=0
            if trainingSet[x][0] in s2[y]:
                a = abs(len(s2[y])-len(trainingSet[x][0]))
            
            if(len(s2[y])>len(trainingSet[x][0])):
                nngram = ngrams(s2[y], len(trainingSet[x][0]))
                
                for gram in nngram:
                    aaa = ""
                    for z in range(len(gram)):
                        aaa += gram[z]

                    if(jamo_levenshtein(aaa, trainingSet[x][0], debug=True) < 0.07):
                        a = abs(len(s2[y])-len(trainingSet[x][0]))
                        break
                    
                    
                    
            dist = abs((jamo_levenshtein(s2[y], trainingSet[x][0], debug=True))-a)
            
            
            if dist >= 0.4:
                distt.append(0.4)
                distances.append(([s2[y],0],0.4))
            else:
                distt.append(dist)
                distances.append((trainingSet[x], dist))
    
    distts=list(set(distt))
    for i in range(len(distts)):
        distss.append(distts[i])
    distss.sort()
    distances.sort(key=operator.itemgetter(1))#키가 아닌 값으로 sort
    neighbors = []
    for j in range(len(distances)):
        if(distances[j][1]<=min(distss)):
            neighbors.append(distances[j][0])#Distance빼고 Neighbor만
    return neighbors

def getResponse(neighbors):
    classVotes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][-1]
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    sortedVotes_0 = sorted(classVotes.items(), key=operator.itemgetter(0), reverse=True)
    return sortedVotes_0[0][0]


def knn(trainingSet,testClass,kmax):
    for k in range(kmax):
        CNresponse = []
       
        neighbors = getNeighbors(trainingSet, testClass, k+1)
        CNresponse.append(getResponse(neighbors))
    return CNresponse
    
def dothelevenshtein(curses,cursent):
    for j in range(len(cursent)):
        B=len(cursent[j])
        v=0
        for i in range(B):
            i -= v
            if(B<=i or i<0):
                break
            if cursent[j][i] in moum_list: #잘 사용하지 않는 모음'만' 있을 때
                if cursent[j][i] == "ㅗ" or cursent[j][i] == "ㅜ" or cursent[j][i] == "ㅠ":
                    continue
                else:
                    B -= cursent[j].count(cursent[j][i])
                    v += 1
                    cursent[j] = cursent[j].replace(cursent[j][i],'')
                
    for j in range(len(cursent)):
        B=len(cursent[j])
        v=0
        for i in range(B):
            i -= v
            if(B<=i or i<0):
                break
            if cursent[j][i] in ['ㅄ','ㄳ']: #잘 사용하지 않는 모음'만' 있을 때
                B += cursent[j].count(cursent[j][i])
                v -= 1
                if cursent[j][i] == 'ㅄ':
                    str = 'ㅂㅅ'
                else:
                    str = 'ㄱㅅ'
                cursent[j] = cursent[j].replace(cursent[j][i],str)
                
    Prediction = knn(curses,cursent,1)
    
    return Prediction[0]

predictions = 0
curword = json.loads(sys.argv[1],encoding="utf-8")
cusent = json.loads(sys.argv[2],encoding="utf-8")
predictions = dothelevenshtein(curword,cusent)##Curses,Cursent
print(predictions)